{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://E%3A/Web%20Engineering/gym-store/src/context/CartContext.js"],"sourcesContent":["'use client'; // This directive is needed for client-side components in Next.js\r\n\r\n// Import necessary React hooks for state management and context creation\r\nimport { createContext, useContext, useState, useEffect } from 'react';\r\n\r\n// Create a Context for our shopping cart\r\nconst CartContext = createContext();\r\n\r\n// This function provides cart functionality to the entire application\r\nexport function CartProvider({ children }) {\r\n  // State to store the cart items\r\n  const [cart, setCart] = useState([]);\r\n  // State to track the total number of items in cart\r\n  const [cartCount, setCartCount] = useState(0);\r\n\r\n  // This effect runs once when the component mounts\r\n  // It loads any saved cart data from the browser's localStorage\r\n  useEffect(() => {\r\n    // Try to get cart data from localStorage\r\n    const savedCart = localStorage.getItem('cart');\r\n    if (savedCart) {\r\n      // If cart data exists, convert it from JSON string to JavaScript object\r\n      setCart(JSON.parse(savedCart));\r\n    }\r\n  }, []);\r\n\r\n  // This effect runs whenever the cart changes\r\n  // It updates localStorage and recalculates the total item count\r\n  useEffect(() => {\r\n    // Save the current cart to localStorage\r\n    localStorage.setItem('cart', JSON.stringify(cart));\r\n    // Calculate the total quantity of all items\r\n    setCartCount(cart.reduce((total, item) => total + item.quantity, 0));\r\n  }, [cart]);\r\n\r\n  // Function to add a product to the cart\r\n  const addToCart = (product) => {\r\n    setCart(prevCart => {\r\n      // Check if the product is already in the cart\r\n      const existingItem = prevCart.find(item => item.id === product.id);\r\n\r\n      if (existingItem) {\r\n        // If it exists, increase its quantity by 1\r\n        return prevCart.map(item =>\r\n          item.id === product.id\r\n            ? { ...item, quantity: item.quantity + 1 }\r\n            : item\r\n        );\r\n      }\r\n      // If it's a new item, add it to the cart with quantity 1\r\n      return [...prevCart, { ...product, quantity: 1 }];\r\n    });\r\n  };\r\n\r\n  // Function to remove a product from the cart\r\n  const removeFromCart = (productId) => {\r\n    // Filter out the item with the matching ID\r\n    setCart(prevCart => prevCart.filter(item => item.id !== productId));\r\n  };\r\n\r\n  // Function to update the quantity of a specific item\r\n  const updateQuantity = (productId, quantity) => {\r\n    // If quantity is less than 1, remove the item completely\r\n    if (quantity < 1) {\r\n      removeFromCart(productId);\r\n      return;\r\n    }\r\n\r\n    // Otherwise update the quantity of the specific item\r\n    setCart(prevCart =>\r\n      prevCart.map(item =>\r\n        item.id === productId\r\n          ? { ...item, quantity }\r\n          : item\r\n      )\r\n    );\r\n  };\r\n\r\n  // Function to empty the cart\r\n  const clearCart = () => {\r\n    setCart([]);\r\n  };\r\n\r\n  // Function to calculate the total price of all items in the cart\r\n  const getCartTotal = () => {\r\n    return cart.reduce((total, item) => total + item.price * item.quantity, 0);\r\n  };\r\n\r\n  // Function to process an order - will integrate with Strapi\r\n  const processOrder = async (orderDetails) => {\r\n    try {\r\n      // Prepare the order data\r\n      const orderData = {\r\n        items: cart,\r\n        total: getCartTotal(),\r\n        ...orderDetails,\r\n        orderDate: new Date().toISOString()\r\n      };\r\n\r\n      // Create a random order ID for now (this will be handled by Strapi in production)\r\n      const orderId = Math.random().toString(36).substr(2, 9).toUpperCase();\r\n\r\n      // Store order details in localStorage for the confirmation page\r\n      localStorage.setItem('lastOrder', JSON.stringify({\r\n        orderId,\r\n        items: cart,\r\n        total: getCartTotal(),\r\n        shipping: orderDetails.shipping,\r\n        paymentMethod: orderDetails.paymentMethod\r\n      }));\r\n\r\n      // Handle online payment if selected\r\n      if (orderDetails.paymentMethod === 'ONLINE') {\r\n        // This would integrate with a payment gateway\r\n        // For Strapi, we could use the Strapi payment plugins\r\n\r\n        // Example of payment processing - will be replaced with Strapi API call\r\n        const paymentResponse = await fetch('/api/process-payment', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify({\r\n            amount: getCartTotal(),\r\n            paymentDetails: orderDetails.paymentDetails\r\n          }),\r\n        });\r\n\r\n        if (!paymentResponse.ok) {\r\n          throw new Error('Payment processing failed');\r\n        }\r\n      }\r\n\r\n      // STRAPI INTEGRATION:\r\n      // Send the order to Strapi backend\r\n      // Replace '/api/orders' with your Strapi endpoint, e.g., 'http://localhost:1337/api/orders'\r\n      const response = await fetch(`${process.env.NEXT_PUBLIC_STRAPI_URL}/api/orders`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          // Add authorization if needed\r\n          // 'Authorization': `Bearer ${token}`,\r\n        },\r\n        body: JSON.stringify({\r\n          data: orderData\r\n        }), // Strapi expects data in this format\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Failed to process order');\r\n      }\r\n\r\n      // Clear the cart after successful order\r\n      clearCart();\r\n      return { success: true, orderId };\r\n    } catch (error) {\r\n      console.error('Error processing order:', error);\r\n      return { success: false, error: error.message };\r\n    }\r\n  };\r\n\r\n  // Provide all cart functions and state to the application\r\n  return (\r\n    <CartContext.Provider\r\n      value={{\r\n        cart,\r\n        cartCount,\r\n        addToCart,\r\n        removeFromCart,\r\n        updateQuantity,\r\n        clearCart,\r\n        getCartTotal,\r\n        processOrder,\r\n      }}\r\n    >\r\n      {children}\r\n    </CartContext.Provider>\r\n  );\r\n}\r\n\r\n// Custom hook to use the cart context\r\nexport function useCart() {\r\n  // Get the context\r\n  const context = useContext(CartContext);\r\n\r\n  // If we try to use the context outside of a CartProvider, throw an error\r\n  if (!context) {\r\n    throw new Error('useCart must be used within a CartProvider');\r\n  }\r\n\r\n  // Return the context\r\n  return context;\r\n} "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 213, "column": 0}, "map": {"version":3,"sources":["file://E%3A/Web%20Engineering/gym-store/src/components/Navbar.js"],"sourcesContent":["'use client'; // This directive is needed for client-side components in Next.js\r\n\r\n// Import React hooks and Next.js components\r\nimport { useState, useEffect } from 'react';\r\nimport Link from 'next/link';\r\nimport Image from 'next/image';\r\n\r\n// Import our custom cart hook\r\nimport { useCart } from '@/context/CartContext';\r\n\r\nexport default function Navbar() {\r\n  // State to track if mobile menu is open or closed\r\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\r\n  // Get the cart count from our CartContext\r\n  const { cartCount } = useCart();\r\n\r\n  // Define our navigation menu items\r\n  const menuItems = [\r\n    { name: 'Home', path: '/' },\r\n    { name: 'Products', path: '/products' },\r\n    { name: 'About', path: '/about' },\r\n  ];\r\n\r\n  \r\n\r\n  return (\r\n    // Main navigation bar with teal background and shadow\r\n    <nav className=\"bg-teal-700 shadow-md sticky\">\r\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 sticky\">\r\n        <div className=\"flex justify-between h-16 sticky\">\r\n          {/* Logo/Brand section */}\r\n         <div className=\"flex items-center sticky\">\r\n  <Link href=\"/\" className=\"flex-shrink-0 flex items-center\">\r\n    <Image\r\n      src=\"/images/store-logo.png\"\r\n      alt=\"Profein Logo\"\r\n      width={140} // Adjust based on your logo's dimensions\r\n      height={70}\r\n      quality={90} \r\n\r\n     className=\"object-contain\" // Ensures proper scaling\r\n      priority // Important for above-the-fold logos\r\n    />\r\n  </Link>\r\n</div>\r\n\r\n          {/* Desktop Menu - only visible on medium screens and above */}\r\n          <div className=\"hidden md:flex items-center space-x-8 sticky\">\r\n            {/* Map through menu items to create links */}\r\n            {menuItems.map((item) => (\r\n              <Link\r\n                key={item.name}\r\n                href={item.path}\r\n                className=\"text-teal-100 hover:text-white px-3 py-2 rounded-md text-sm font-medium\"\r\n              >\r\n                {item.name}\r\n              </Link>\r\n            ))}\r\n\r\n            {/* Admin link - always visible */}\r\n            <Link\r\n              href=\"/admin\"\r\n              className=\"text-orange-400 hover:text-orange-300 px-3 py-2 rounded-md text-sm font-medium\"\r\n            >\r\n              Admin\r\n            </Link>\r\n\r\n            {/* Cart button with item count */}\r\n            <Link\r\n              href=\"/cart\"\r\n              className=\"relative text-teal-800 bg-orange-400 hover:bg-orange-500 px-4 py-2 rounded-md text-sm font-medium transition-colors group\"\r\n            >\r\n              <span className=\"flex items-center\">\r\n                Cart\r\n                {/* Show cart count badge if there are items in cart */}\r\n                {cartCount > 0 && (\r\n                  <span className=\"ml-2 bg-teal-800 text-orange-400 px-2 py-1 rounded-full text-xs group-hover:bg-teal-900\">\r\n                    {cartCount}\r\n                  </span>\r\n                )}\r\n              </span>\r\n            </Link>\r\n          </div>\r\n\r\n          {/* Mobile menu button - only visible on small screens */}\r\n          <div className=\"md:hidden flex items-center\">\r\n            <button\r\n              onClick={() => setIsMenuOpen(!isMenuOpen)}\r\n              className=\"inline-flex items-center justify-center p-2 rounded-md text-teal-100 hover:text-white hover:bg-teal-600\"\r\n            >\r\n              <span className=\"sr-only\">Open main menu</span>\r\n              {/* Toggle between hamburger and X icon based on menu state */}\r\n              {!isMenuOpen ? (\r\n                <svg className=\"block h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 6h16M4 12h16M4 18h16\" />\r\n                </svg>\r\n              ) : (\r\n                <svg className=\"block h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\r\n                </svg>\r\n              )}\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Mobile Menu - only displayed when isMenuOpen is true */}\r\n      {isMenuOpen && (\r\n        <div className=\"md:hidden bg-teal-800\">\r\n          <div className=\"px-2 pt-2 pb-3 space-y-1 sm:px-3\">\r\n            {/* Map through menu items to create mobile menu links */}\r\n            {menuItems.map((item) => (\r\n              <Link\r\n                key={item.name}\r\n                href={item.path}\r\n                className=\"block text-teal-100 hover:text-white hover:bg-teal-600 px-3 py-2 rounded-md text-base font-medium\"\r\n                onClick={() => setIsMenuOpen(false)} // Close menu when link is clicked\r\n              >\r\n                {item.name}\r\n              </Link>\r\n            ))}\r\n\r\n            {/* Admin link - always visible */}\r\n            <Link\r\n              href=\"/admin\"\r\n              className=\"block text-orange-400 hover:text-orange-300 hover:bg-teal-600 px-3 py-2 rounded-md text-base font-medium\"\r\n              onClick={() => setIsMenuOpen(false)}\r\n            >\r\n              Admin\r\n            </Link>\r\n\r\n            {/* Mobile cart button */}\r\n            <Link\r\n              href=\"/cart\"\r\n              className=\"block text-teal-800 bg-orange-400 hover:bg-orange-500 px-3 py-2 rounded-md text-base font-medium flex items-center justify-between\"\r\n              onClick={() => setIsMenuOpen(false)} // Close menu when cart is clicked\r\n            >\r\n              <span>Cart</span>\r\n              {/* Show cart count badge if there are items in cart */}\r\n              {cartCount > 0 && (\r\n                <span className=\"bg-teal-800 text-orange-400 px-2 py-1 rounded-full text-xs\">\r\n                  {cartCount}\r\n                </span>\r\n              )}\r\n            </Link>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </nav>\r\n  );\r\n} "],"names":[],"mappings":";;;;AAEA,4CAA4C;AAC5C;AACA;AACA;AAEA,8BAA8B;AAC9B;;;AARA,cAAc,iEAAiE;;;;;AAUhE,SAAS;;IACtB,kDAAkD;IAClD,MAAM,CAAC,YAAY,cAAc,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAC7C,0CAA0C;IAC1C,MAAM,EAAE,SAAS,EAAE,GAAG,CAAA,GAAA,gIAAA,CAAA,UAAO,AAAD;IAE5B,mCAAmC;IACnC,MAAM,YAAY;QAChB;YAAE,MAAM;YAAQ,MAAM;QAAI;QAC1B;YAAE,MAAM;YAAY,MAAM;QAAY;QACtC;YAAE,MAAM;YAAS,MAAM;QAAS;KACjC;IAID,OACE,sDAAsD;kBACtD,6LAAC;QAAI,WAAU;;0BACb,6LAAC;gBAAI,WAAU;0BACb,cAAA,6LAAC;oBAAI,WAAU;;sCAEd,6LAAC;4BAAI,WAAU;sCACtB,cAAA,6LAAC,+JAAA,CAAA,UAAI;gCAAC,MAAK;gCAAI,WAAU;0CACvB,cAAA,6LAAC,gIAAA,CAAA,UAAK;oCACJ,KAAI;oCACJ,KAAI;oCACJ,OAAO;oCACP,QAAQ;oCACR,SAAS;oCAEV,WAAU,iBAAiB,yBAAyB;;oCACnD,QAAQ;;;;;;;;;;;;;;;;sCAMJ,6LAAC;4BAAI,WAAU;;gCAEZ,UAAU,GAAG,CAAC,CAAC,qBACd,6LAAC,+JAAA,CAAA,UAAI;wCAEH,MAAM,KAAK,IAAI;wCACf,WAAU;kDAET,KAAK,IAAI;uCAJL,KAAK,IAAI;;;;;8CASlB,6LAAC,+JAAA,CAAA,UAAI;oCACH,MAAK;oCACL,WAAU;8CACX;;;;;;8CAKD,6LAAC,+JAAA,CAAA,UAAI;oCACH,MAAK;oCACL,WAAU;8CAEV,cAAA,6LAAC;wCAAK,WAAU;;4CAAoB;4CAGjC,YAAY,mBACX,6LAAC;gDAAK,WAAU;0DACb;;;;;;;;;;;;;;;;;;;;;;;sCAQX,6LAAC;4BAAI,WAAU;sCACb,cAAA,6LAAC;gCACC,SAAS,IAAM,cAAc,CAAC;gCAC9B,WAAU;;kDAEV,6LAAC;wCAAK,WAAU;kDAAU;;;;;;oCAEzB,CAAC,2BACA,6LAAC;wCAAI,WAAU;wCAAgB,MAAK;wCAAO,SAAQ;wCAAY,QAAO;kDACpE,cAAA,6LAAC;4CAAK,eAAc;4CAAQ,gBAAe;4CAAQ,aAAa;4CAAG,GAAE;;;;;;;;;;6DAGvE,6LAAC;wCAAI,WAAU;wCAAgB,MAAK;wCAAO,SAAQ;wCAAY,QAAO;kDACpE,cAAA,6LAAC;4CAAK,eAAc;4CAAQ,gBAAe;4CAAQ,aAAa;4CAAG,GAAE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YAShF,4BACC,6LAAC;gBAAI,WAAU;0BACb,cAAA,6LAAC;oBAAI,WAAU;;wBAEZ,UAAU,GAAG,CAAC,CAAC,qBACd,6LAAC,+JAAA,CAAA,UAAI;gCAEH,MAAM,KAAK,IAAI;gCACf,WAAU;gCACV,SAAS,IAAM,cAAc;0CAE5B,KAAK,IAAI;+BALL,KAAK,IAAI;;;;;sCAUlB,6LAAC,+JAAA,CAAA,UAAI;4BACH,MAAK;4BACL,WAAU;4BACV,SAAS,IAAM,cAAc;sCAC9B;;;;;;sCAKD,6LAAC,+JAAA,CAAA,UAAI;4BACH,MAAK;4BACL,WAAU;4BACV,SAAS,IAAM,cAAc;;8CAE7B,6LAAC;8CAAK;;;;;;gCAEL,YAAY,mBACX,6LAAC;oCAAK,WAAU;8CACb;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AASnB;GA5IwB;;QAIA,gIAAA,CAAA,UAAO;;;KAJP","debugId":null}}]
}